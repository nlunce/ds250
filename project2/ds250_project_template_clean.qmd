---
title: "Client Report - Project 2"
subtitle: "Course DS 250"
author: "Nathan Lunceford"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import altair as alt
import numpy as np

from IPython.display import Markdown
from IPython.display import display
from tabulate import tabulate
```


## Elevator pitch

_In this project, I worked with untidy data. I also demonstrate how to work with and clean data and make it tidy._

```{python}
#| label: project data
#| code-summary: Read and format project data
# Include and execute your code here
dat = pd.read_csv("https://github.com/byuidatascience/data4names/raw/master/data-raw/names_year/names_year.csv")
```

__Highlight the grand questions__

## GRAND QUESTION 1

__Which airport has the worst delays? Discuss the metric you chose, and why you chose it to determine the “worst” airport. Your answer should include a summary table that lists (for each airport) the total number of flights, total number of delayed flights, proportion of delayed flights, and average delay time in hours.__

_The airport with the worst delays is the San Francisco International Airport. Some of the other airports had higher delay-to-flight ratios (delay_rate_percent) but had lower average delays in hours. I chose the average delay in hours as my decision-making metric because some airports might have more delays in total but what matters is how long those delays are._

```{python}
#| label: GQ1
#| code-summary: Read and format data
# Include and execute your code here

# Load dataset
df = pd.read_json('flights_missing.json')

# Filter data
filter_df = df.filter(['airport_code', 'num_of_flights_total', 'num_of_delays_late_aircraft', 'minutes_delayed_total' ])

# Remove rows with negative values
filter_df = filter_df.query('num_of_delays_late_aircraft > 0')

# Group by airport code
group = filter_df.groupby('airport_code').agg('sum')

# Add and calculate delay rate percentage and average_delay_hours columns
group['delay_rate_percent'] = (group['num_of_delays_late_aircraft']/group['num_of_flights_total'])*100

group['average_delay_hours'] = (group['minutes_delayed_total']/group['num_of_delays_late_aircraft'])/60
 
# Drop minutes_delayed_total column

final = group.drop('minutes_delayed_total', axis=1)
final

```


## GRAND QUESTION 2

__What is the best month to fly if you want to avoid delays of any length? Discuss the metric you chose and why you chose it to calculate your answer. Include one chart to help support your answer, with the x-axis ordered by month. (To answer this question, you will need to remove any rows that are missing the Month variable.)__

_The best month to fly if you want to avoid delays of any length is November. The metric I chose to decide was the total number of delays by month. November has the least total delays out of all the months._

```{python}
#| label: GQ2
#| code-summary: Read and format data
# Include and execute your code here

#Load Dataset
df = pd.read_json('flights_missing.json')

# Filter Data
filter_df = df.filter(['month','num_of_delays_total' ])

filter_df = filter_df.query('month != "n/a"')
month_order = ['January', 'Febuary', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

filter_df['month'] = pd.Categorical(filter_df['month'], categories=month_order, ordered=True)

# Group data
chart = filter_df.groupby('month', as_index=False).agg('sum')

# Graph Data
graph = (alt.Chart(chart, title='Total Number of Delays by Month')
  .encode(
    x=alt.X('month:O', axis=alt.Axis(title="Month"), sort= month_order),
    y=alt.Y('num_of_delays_total:Q', axis=alt.Axis(title="Delays"))
        ).configure_axis(
             labelFontSize=20,
             titleFontSize=30
        ).configure_title(
            fontSize=35
        ).properties(
            width=800,
            height=400 )
  .mark_bar()
)
graph

```
```{python}
#| label: GQ2.1
#| code-summary: Display Data in Table
# Include and execute your code here
chart

```


## GRAND QUESTION 3

__According to the BTS website, the “Weather” category only accounts for severe weather delays. Mild weather delays are not counted in the “Weather” category, but are actually included in both the “NAS” and “Late-Arriving Aircraft” categories. Your job is to create a new column that calculates the total number of flights delayed by weather (both severe and mild). You will need to replace all the missing values in the Late Aircraft variable with the mean. Show your work by printing the first 5 rows of data in a table. Use these three rules for your calculations:


a. 100% of delayed flights in the Weather category are due to weather

b. 30% of all delayed flights in the Late-Arriving category are due to weather.

c.From April to August, 40% of delayed flights in the NAS category are due to weather. The rest of the months, the proportion rises to 65%.__

_I first created two new columns that include delays caused by mild weather. I then created a column that includes all weather delays including mild weather delays._

```{python}
#| label: GQ3
#| code-summary: Read and format data
# Include and execute your code here
df = pd.read_json("flights_missing.json")


# Filter Data Columns
desired_columns = [
    "month",
    "num_of_delays_nas",
    "num_of_delays_weather",
    "num_of_delays_late_aircraft",
]
filter_df = df.filter(desired_columns)

# Filter data
filter_df["num_of_delays_late_aircraft"] = filter_df[
    "num_of_delays_late_aircraft"
].replace({-999: np.nan})

# Calculate average 'num_of_delays_late_aircraft'
avg_delays_late_aircraft = filter_df["num_of_delays_late_aircraft"].mean().round()

# Replace Nan values with avg_delays_late_aircraft
filter_df["num_of_delays_late_aircraft"] = filter_df[
    "num_of_delays_late_aircraft"
].replace({np.nan: avg_delays_late_aircraft})

# Drop n/a months
filter_df = filter_df.query('month != "n/a"')


# Define the conditions
months = ["April", "May", "June", "July", "August"]
condition = filter_df["month"].isin(months)

# Mild late
filter_df = filter_df.assign(
    num_delays_mild_weather_late_aircraft=filter_df["num_of_delays_late_aircraft"]
    * 0.30
)


# mild nas
filter_df = filter_df.assign(
    num_delays_mild_weather_nas=np.where(
        condition,
        filter_df["num_of_delays_nas"] * 0.40,
        filter_df["num_of_delays_nas"] * 0.65,
    )
)

# weather total and sever

filter_df = filter_df.assign(
    total_num_weather_delays=(
        filter_df["num_of_delays_weather"]
        + filter_df["num_delays_mild_weather_late_aircraft"]
        + filter_df["num_delays_mild_weather_nas"]
    ).round()
)

# Finalize
final = filter_df.rename(
    columns={"num_of_delays_weather": "num_of_delays_severe_weather"}
).filter(
    [
        "month",
        "num_of_delays_nas",
        "num_of_delays_late_aircraft",
        "num_of_delays_severe_weather",
        "total_num_weather_delays",
    ]
)


final.head(5)

```



## GRAND QUESTION 4

__Using the new weather variable calculated above, create a barplot showing the proportion of all flights that are delayed by weather at each airport. Discuss what you learn from this graph.__

_From these graphs I can conclude that roughly one third of all the delays were caused by weather. I can conclude that O'Hare International Airport has the most delays due to weather and San Diego International Airport has the least delays due to weather._

```{python}
#| label: GQ4
#| code-summary: Read and format data
# Include and execute your code here

df = pd.read_json("flights_missing.json")

# Filter Data Columns
desired_columns = [
    "airport_code",
    "month",
    "num_of_delays_nas",
    "num_of_delays_weather",
    "num_of_delays_late_aircraft",
    "num_of_delays_total",
]
filter_df = df.filter(desired_columns)


# Filter data
filter_df["num_of_delays_late_aircraft"] = filter_df[
    "num_of_delays_late_aircraft"
].replace({-999: np.nan})

# Calculate average 'num_of_delays_late_aircraft'
avg_delays_late_aircraft = filter_df["num_of_delays_late_aircraft"].mean().round()

# Replace Nan values with avg_delays_late_aircraft
filter_df["num_of_delays_late_aircraft"] = filter_df[
    "num_of_delays_late_aircraft"
].replace({np.nan: avg_delays_late_aircraft})

# Drop n/a months
filter_df = filter_df.query('month != "n/a"')


# Define the conditions
months = ["April", "May", "June", "July", "August"]
condition = filter_df["month"].isin(months)


# Mild late
filter_df = filter_df.assign(
    num_delays_mild_weather_late_aircraft=filter_df["num_of_delays_late_aircraft"]
    * 0.30
)

# mild nas
filter_df = filter_df.assign(
    num_delays_mild_weather_nas=np.where(
        condition,
        filter_df["num_of_delays_nas"] * 0.40,
        filter_df["num_of_delays_nas"] * 0.65,
    )
)

# weather total and sever
filter_df = filter_df.assign(
    total_num_weather_delays=(
        filter_df["num_of_delays_weather"]
        + filter_df["num_delays_mild_weather_late_aircraft"]
        + filter_df["num_delays_mild_weather_nas"]
    ).round()
)

# Finalize
final = filter_df.rename(
    columns={"num_of_delays_weather": "num_of_delays_severe_weather"}
).filter(
    [
        "airport_code",
        "month",
        "num_of_delays_nas",
        "num_of_delays_late_aircraft",
        "num_of_delays_severe_weather",
        "total_num_weather_delays",
        "num_of_delays_total",
    ]
)


final = final.groupby("airport_code", as_index=False).agg(
    total_weather_delays=("total_num_weather_delays", "sum"),
    total_delays=("num_of_delays_total", "sum"),
)

final["total_weather_delays"] = final["total_weather_delays"].astype(int)

final["Percent of Total Delays Caused by Weather"] = (
    final["total_weather_delays"] / final["total_delays"]
).apply(lambda x: f"{x:0.2f}" + "%")


final = final.rename(
    columns={
        "total_weather_delays": "Weather Delays",
        "total_delays": "Total Delays",
        "airport_code": "Airport Code",
    }
)


graph1 = (
    alt.Chart(final, title="Total Number of Delays")
    .mark_bar()
    .encode(
        x=alt.X("Airport Code:O", axis=alt.Axis(title="Airport")),
        y=alt.Y("Total Delays:Q", axis=alt.Axis(title="Delays")),
    )
)


graph2 = (
    alt.Chart(final, title="Total Delays Caused by Weather")
    .mark_bar(color="#900dd6")
    .encode(
        x=alt.X("Airport Code:O", axis=alt.Axis(title="Airport")),
        y=alt.Y("Weather Delays:Q", axis=alt.Axis(title="Delays")),
    )
)


graph3 = graph1 + graph2

graph3 = graph3.properties(
    title="Total Number of Delays Compared to Delays Caused by Weather"
)
final_graph = graph3 | graph1 | graph2
final_graph

```

```{python}
#| label: GQ4 Table
#| code-summary: Read and format data
# Include and execute your code here
final


```



## GRAND QUESTION 5

__Fix all of the varied missing data types in the data to be consistent (all missing values should be displayed as “NaN”). In your report include one record example (one row) from your new data, in the raw JSON format. Your example should display the “NaN” for at least one missing value.__

_
In raw JSON format "NaN" values apear as "null". 


'{"airport_code":{"0":"ATL"},
 "airport_name":{"0":"Atlanta, GA: Hartsfield-Jackson Atlanta International"},
 "month":{"0":"January"},
 "year":{"0":2005.0},
 "num_of_flights_total":{"0":35048},
 "num_of_delays_carrier":{"0":"1500+"},

 "num_of_delays_late_aircraft":{"0":null},

 "num_of_delays_nas":{"0":4598},
 "num_of_delays_security":{"0":10},
 "num_of_delays_weather":{"0":448},
 "num_of_delays_total":{"0":8355},
 "minutes_delayed_carrier":{"0":116423.0},
 "minutes_delayed_late_aircraft":{"0":104415},
 "minutes_delayed_nas":{"0":207467.0},
 "minutes_delayed_security":{"0":297},
 "minutes_delayed_weather":{"0":36931},
 "minutes_delayed_total":{"0":465533}}'
_

```{python}
#| label: GQ5 
#| code-summary: Read and format data
# Include and execute your code here

# Load dataset
df = pd.read_json("flights_missing.json")

df["num_of_delays_late_aircraft"] = df["num_of_delays_late_aircraft"].replace(
    {-999: np.nan}
)

df["minutes_delayed_nas"] = df["minutes_delayed_nas"].replace({-999: np.nan})

df["month"] = df["month"].replace({"n/a": np.nan})


df["airport_name"] = df["airport_name"].replace({"": np.nan})

json = df.head(1)
json.to_json()


```

_include figures in chunks and discuss your findings in the figure._
## APPENDIX A (Additional Python Code)

```python
#paste other your code from your python file (.py) here
```
