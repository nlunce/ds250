---
title: "Client Report - Project 4"
subtitle: "Course DS 250"
author: "Nathan Lunceford"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import altair as alt
import numpy as np

from IPython.display import Markdown
from IPython.display import display
from tabulate import tabulate
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn import tree
alt.data_transformers.enable('json')

dwell_denver = pd.read_csv("dwellings_denver.csv")
dwell_ml = pd.read_csv("dwellings_ml.csv")
dwell_neighborhoods_ml = pd.read_csv("dwellings_neighborhoods_ml.csv")
```


## Elevator pitch

_paste your elevator pitch here_


## GRAND QUESTION 1

__Create 2-3 charts that evaluate potential relationships between the home variables and before1980. Explain what you learn from the charts that could help a machine learning algorithm.__

_type your results and analysis here_

```{python}
#| label: GQ1
#| code-summary: Read and format data
# Include and execute your code here

dwell_ml.rename(columns={'arcstyle_ONE-STORY' : 'arcstyle_ONE_STORY'}, inplace=True)

# Compute the correlation
correlation_matrix = dwell_ml[['arcstyle_ONE_STORY', 'before1980']].corr()


correlation_df = correlation_matrix.unstack().reset_index(name='correlation')
correlation_df = correlation_df.rename(columns={'level_0': 'attribute', 'level_1': 'target'})

heatmap1 = alt.Chart(correlation_df).mark_rect().encode(
    x=alt.X('attribute:N', title=None, axis=alt.Axis(labelAngle=-45, labelFontSize=10, titleFontSize=16)),
    y=alt.Y('target:N', title=None, axis=alt.Axis(labelFontSize=10, titleFontSize=16)),
    color=alt.Color('correlation:Q', scale=alt.Scale(scheme='viridis'), title='Correlation'),
    tooltip=['attribute', 'target', alt.Tooltip('correlation:Q')]
).properties(
    title=alt.TitleParams(
        text='Correlation Matrix: "arcstyle_ONE_STORY" vs "before1980"',
        fontSize=10,
        anchor='middle',
        fontWeight='bold'
    ),
       width=100,  # Specify the width of the chart
    height=66  # Specify the height of the chart
)

# Compute the correlation
correlation_matrix = dwell_ml[['numbaths', 'before1980']].corr()


correlation_df = correlation_matrix.unstack().reset_index(name='correlation')
correlation_df = correlation_df.rename(columns={'level_0': 'attribute', 'level_1': 'target'})

heatmap2 = alt.Chart(correlation_df).mark_rect().encode(
    x=alt.X('attribute:N', title=None, axis=alt.Axis(labelAngle=-45, labelFontSize=10, titleFontSize=16)),
    y=alt.Y('target:N', title=None, axis=alt.Axis(labelFontSize=10, titleFontSize=16)),
    color=alt.Color('correlation:Q', scale=alt.Scale(scheme='viridis'), title='Correlation'),
    tooltip=['attribute', 'target', alt.Tooltip('correlation:Q')]
).properties(
    title=alt.TitleParams(
        text='Correlation Matrix: "numbaths" vs "before1980"',
        fontSize=10,
        anchor='middle',
        fontWeight='bold'
    ),
      width=100,  # Specify the width of the chart
    height=66  # Specify the height of the chart
)


# Compute the correlation
correlation_matrix = dwell_ml[['stories', 'before1980']].corr()


correlation_df = correlation_matrix.unstack().reset_index(name='correlation')
correlation_df = correlation_df.rename(columns={'level_0': 'attribute', 'level_1': 'target'})

heatmap3 = alt.Chart(correlation_df).mark_rect().encode(
    x=alt.X('attribute:N', title=None, axis=alt.Axis(labelAngle=-45, labelFontSize=10, titleFontSize=16)),
    y=alt.Y('target:N', title=None, axis=alt.Axis(labelFontSize=10, titleFontSize=16)),
    color=alt.Color('correlation:Q', scale=alt.Scale(scheme='viridis'), title='Correlation'),
    tooltip=['attribute', 'target', alt.Tooltip('correlation:Q')]
).properties(
    title=alt.TitleParams(
        text='Correlation Matrix: "stories" vs "before1980"',
        fontSize=10,
        anchor='middle',
        fontWeight='bold'
    ),
    width=100,  # Specify the width of the chart
    height=66  # Specify the height of the chart
)

final = heatmap1 | heatmap2 | heatmap3
final



```


```{python}
#| label: GQ1.2
#| code-summary: Read and format data
# Include and execute your code here
dwell_ml[['arcstyle_ONE_STORY', 'before1980']].corr()

```


```{python}
#| label: GQ1.3
#| code-summary: Read and format data
# Include and execute your code here
dwell_ml[['numbaths', 'before1980']].corr()

```


```{python}
#| label: GQ3.4
#| code-summary: Read and format data
# Include and execute your code here
dwell_ml[['stories', 'before1980']].corr()

```

_include figures in chunks and discuss your findings in the figure._



## GRAND QUESTION 2

__Build a classification model labeling houses as being built “before 1980” or “during or after 1980”. Your goal is to reach or exceed 90% accuracy. Explain your final model choice (algorithm, tuning parameters, etc) and describe what other models you tried.__

_The algorithm I used to train my classifier was the DecisionTreeClassifier, my tuning parameters were: 'livearea', 'yrbuilt', 'arcstyle_ONE-STORY', and 'numbaths'. I tried the GaussianNB algorithm for my classifier but the highest accuracy I got with it was about 94%. When I used the DecisionTreeClassifier I got 100% accuracy every time. I chose my tuning parameters based on their correlation with the before1980 feature, I chose them because they had the highest correlation out of all the features in the data frame._

```{python}
#| label: GQ2
#| code-summary: Read and format data
# Include and execute your code here

# Load dataset/add columns befor and after1980
dwell_denver = pd.read_csv("dwellings_denver.csv")
dwell_ml = pd.read_csv("dwellings_ml.csv")
dwell_neighborhoods_ml = pd.read_csv("dwellings_neighborhoods_ml.csv")

dwell_ml['during1980'] = (dwell_ml['yrbuilt'] == 1980).astype(int)
dwell_ml['after1980'] = (dwell_ml['yrbuilt'] > 1980).astype(int)

# Train model
X = dwell_ml[['livearea','yrbuilt','arcstyle_ONE-STORY','numbaths']]
y = dwell_ml[['before1980', 'during1980', 'after1980']]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.3)

classifier = DecisionTreeClassifier()
classifier.fit(X_train, y_train)

# prediction
predictions = classifier.predict(X_test)

# score
score = accuracy_score(y_test, predictions)

print(f"The accuracy of my classifier is {score * 100}%")



```

_include figures in chunks and discuss your findings in the figure._



## GRAND QUESTION 3

__Justify your classification model by discussing the most important features selected by your model. This discussion should include a chart and a description of the features.__

_type your results and analysis here_

```{python}
#| label: GQ3
#| code-summary: Read and format data
# Include and execute your code here


```

_include figures in chunks and discuss your findings in the figure._



## GRAND QUESTION 4

__Describe the quality of your classification model using 2-3 different evaluation metrics. You also need to explain how to interpret each of the evaluation metrics you use.__

_type your results and analysis here_

```{python}
#| label: GQ4
#| code-summary: Read and format data
# Include and execute your code here


```

_include figures in chunks and discuss your findings in the figure._

## APPENDIX A (Additional Python Code)

```python
#paste other your code from your python file (.py) here
```
